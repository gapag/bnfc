// This Antlr4 file was machine-generated by the BNF converter
lexer grammar LayoutLexer;


@lexer::members {

			private static String SPACE = "  ";
			public StringBuffer indentation = new StringBuffer();

	    int nesting = 0;
	    private final java.util.Deque<Token> pendingTokens = initDeque();

			public void increaseIndentation(){
				System.out.println("Ho indentato");
				nesting++;
				indentation.append(SPACE);
			}

			public void decreaseIndentation(){
				System.out.println("Ho sdentato");
				nesting--;
				indentation = indentation.delete(0, 2);
			}

			public final java.util.Deque<Token> initDeque(){
				java.util.ArrayDeque<Token> dq = new java.util.ArrayDeque<Token>();
				//dq.add(this._factory.create(INDENTATION,indentation.toString()));
				return dq;
			}

	    public void injectIndentation(){
				pendingTokens.add(this._factory.create(INDENTATION,indentation.toString()));
	    }

	    @Override
			public Token nextToken() {
					if(pendingTokens.size()>0){
						return pendingTokens.pop();
					}else{
						Token t = super.nextToken();
						if(t.getType() == INDENTATION_DECREASED){
							pendingTokens.add(this._factory.create(INDENTATION,indentation.toString()));
						}
						return t;
					}
			}

}

// Predefined regular expressions in BNFC
fragment LETTER  : CAPITAL | SMALL ;
fragment CAPITAL : [A-Z\u00C0-\u00D6\u00D8-\u00DE] ;
fragment SMALL   : [a-z\u00DF-\u00F6\u00F8-\u00FF] ;
fragment DIGIT   : [0-9] ;

// Identifier token type
fragment
IDENTIFIER_FIRST : LETTER | '_';

fragment
White : (' ' | '\r' | '\t' );
// Escapable sequences
fragment
Escapable : ('"' | '\\' | 'n' | 't' | 'r');

INDENTATION : White*{getText().length() == nesting}? -> mode(INDENT);
INDENTATION_INCREASED : White*{getText().length() > nesting}?{nesting = getText().length();}{setText("Ah sì ah Sì");} -> mode(INDENT);
INDENTATION_DECREASED : White*{getText().length() < nesting}?{nesting = getText().length();} -> mode(INDENT);

mode INDENT;
Surrogate_id_SYMB_0 : '=' ;
Surrogate_id_SYMB_1 : ':' ;
Surrogate_id_SYMB_2 : 'True' ;
Surrogate_id_SYMB_3 : 'if' ;

IDENT : IDENTIFIER_FIRST (IDENTIFIER_FIRST | DIGIT)* ;

NEWLINE : 'r'? '\n'  -> skip, mode(DEFAULT_MODE);
WS : White+ -> skip;

ErrorToken : . ;